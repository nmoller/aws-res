---
AWSTemplateFormatVersion: 2010-09-09

Description: VM pour tester scripts dinit


Parameters:
  
  EC2KeyName:
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName
  
  WebInstanceType:
    AllowedValues:
      - t2.nano 
      - t2.micro 
      - t2.small 
    Type: String
    Default: t2.micro
  
  LatestAmiId :
    Type : AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
     

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
      

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
    

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Modifier le groupe par default pour se connecter SSH
  VPCDefaultSecurityGroupIngress: 
    Type : AWS::EC2::SecurityGroupIngress
    Properties : 
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  VM:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deploy_webserver:
            #- install_logs
            - install_webserver
            - install_moodle
            #- install_cacheclient
            #- install_opcache
            - install_cronapache
        install_webserver:
          files:
            /tmp/create_site_conf.sh:
              content: !Sub |
                #!/bin/bash -xe
                amazon-linux-extras install -y php7.3 postgresql9.6 
                yum install -y httpd php-pgsql php-gd php-soap php-intl php-mbstring php-xmlrpc php-zip
                sed -i 's/memory_limit =.*/memory_limit = 2048M/' /etc/php.ini
                if [ ! -f /etc/httpd/conf.d/moodle.conf ]; then                    
                   touch /etc/httpd/conf.d/moodle.conf
                   echo 'ServerName 127.0.0.1:80' >> /etc/httpd/conf.d/moodle.conf
                   echo 'DocumentRoot /var/www/moodle/html' >> /etc/httpd/conf.d/moodle.conf
                   echo '<Directory /var/www/moodle/html>' >> /etc/httpd/conf.d/moodle.conf
                   echo '  Options Indexes FollowSymLinks' >> /etc/httpd/conf.d/moodle.conf
                   echo '  AllowOverride All' >> /etc/httpd/conf.d/moodle.conf
                   echo '  Require all granted' >> /etc/httpd/conf.d/moodle.conf
                   echo '</Directory>' >> /etc/httpd/conf.d/moodle.conf
                fi
              mode: 000500
              owner: root
              group: root
          commands:
            create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
        install_logs:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state
                
                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = 'Moodle'
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format = 
                
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = 'Moodle'
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 
                
                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = 'Moodle'
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = 
                
                [/var/log/cfn-hup.log]
                file = /var/log/cfn-hup.log
                log_group_name = 'Moodle'
                log_stream_name = {instance_id}/cfn-hup.log
                datetime_format = 
                
                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = 'Moodle'
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = 
                
                [/var/log/httpd]
                file = /var/log/httpd/*
                log_group_name = 'Moodle'
                log_stream_name = httpd
                datetime_format = %d/%b/%Y:%H:%M:%S
                
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            01_create_state_directory:
              command: mkdir -p /var/awslogs/state
          services:
            sysvinit:
              awslogsd:
                enabled: 'true'
                ensureRunning: 'true'
                files: /etc/awslogs/awslogs.conf
        install_aws_ini:
          commands:
            install_aws_ini:
              command: ./download_aws_ini.sh
              cwd: /tmp
              ignoreErrors: true
        install_moodle:
          files:
            /tmp/config.php:
              content: !Sub |
                <?php
                $CFG = new stdClass;
                $CFG->dbtype = 'pgsql';
                $CFG->dblibrary = 'native';
                $CFG->prefix = 'mdl_';
                $CFG->dboptions = array(
                  'dbpersist' => false,
                  'dbsocket' => false,
                  'dbport' => '',
                  'dbhandlesoptions' => false,
                  'dbcollation' => 'utf8mb4_unicode_ci',
                );
                // Hostname definition //
                $hostname = 'test';
                if ($hostname == '') {
                  $hostwithprotocol = 'test';
                }
                else {
                  $hostwithprotocol = 'https://' . strtolower($hostname);
                }
                $CFG->wwwroot = strtolower($hostwithprotocol);
                $CFG->sslproxy = (substr($hostwithprotocol,0,5)=='https' ? true : false);
                // Moodledata location //
                $CFG->dataroot = '/var/www/moodle/data';
                $CFG->tempdir = '/var/www/moodle/temp';
                $CFG->cachedir = '/var/www/moodle/cache';
                $CFG->localcachedir = '/var/www/moodle/local';
                $CFG->directorypermissions = 02777;
                $CFG->admin = 'admin';
                // Configure Session Cache
                $SessionEndpoint = 'test';
                if ($SessionEndpoint != '') {
                  $CFG->dbsessions = false;
                  $CFG->session_handler_class = '\core\session\memcached';
                  $CFG->session_memcached_save_path = $SessionEndpoint;
                  $CFG->session_memcached_prefix = 'memc.sess.key.';
                  $CFG->session_memcached_acquire_lock_timeout = 120;
                  $CFG->session_memcached_lock_expire = 7100;
                  $CFG->session_memcached_lock_retry_sleep = 150;
                }
                //@error_reporting(E_ALL | E_STRICT);   // NOT FOR PRODUCTION SERVERS!
                //@ini_set('display_errors', '1');         // NOT FOR PRODUCTION SERVERS!
                //$CFG->debug = (E_ALL | E_STRICT);   // === DEBUG_DEVELOPER - NOT FOR PRODUCTION SERVERS!
                //$CFG->debugdisplay = 1; 
                require_once(__DIR__ . '/lib/setup.php');
                // END OF CONFIG //
                ?>
              mode: '000755'
              owner: root
              group: root
            /tmp/install_moodle.sh:
              content:  !Sub |
                #!/bin/bash -xe
                wget -O /tmp/moodle.tgz https://download.moodle.org/download.php/direct/stable38/moodle-3.8.3.tgz
                tar -xvzf /tmp/moodle.tgz --strip-components=1 -C /var/www/moodle/html/
                cp /tmp/config.php /var/www/moodle/html/config.php
                chown -R root:apache /var/www/moodle/html
                chown -R apache:apache /var/www/moodle/local
                
              mode: 000500
              owner: root
              group: root
          commands:
            install_moodle:
              command: ./install_moodle.sh
              cwd: /tmp
              ignoreErrors: false          
        install_cacheclient:
          packages:
            yum:
              gcc-c++: []  
          files:
            /tmp/install_cacheclient.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  
                  #Install memcached and then remove it. Memcached is not actually needed. We install amazon-elasticache-cluster-client.so instead. However Moodle does not detect memcached is installed. Therefore, this tricks Moodle into thinking it is installed.
                  sudo yum install -y php-pecl-memcached
                  sudo yum remove -y php-pecl-memcached
                  
                  wget -P /tmp/ https://elasticache-downloads.s3.amazonaws.com/ClusterClient/PHP-7.3/latest-64bit
                  tar -xf '/tmp/latest-64bit' 
                  cp '/tmp/amazon-elasticache-cluster-client.so' /usr/lib64/php/modules/
                  if [ ! -f /etc/php.d/50-memcached.ini ]; then
                      touch /etc/php.d/50-memcached.ini
                  fi
                  echo 'extension=/usr/lib64/php/modules/amazon-elasticache-cluster-client.so;' >> /etc/php.d/50-memcached.ini
                  echo 'extension=igbinary.so;' >> /etc/php.d/50-memcached.ini
                  
                  #update Moodle source to use DYNAMIC_CLIENT_MODE so Moodle can detect changes to the elasticache cluster membership
                  sed -i '/\$this->options\[Memcached::OPT_BUFFER_WRITES\] = \$bufferwrites;/a \ \ \ \ \ \ \ \ $this->options[Memcached::OPT_CLIENT_MODE] = Memcached::DYNAMIC_CLIENT_MODE;' /var/www/moodle/html/cache/stores/memcached/lib.php
                  
              mode: 000500
              owner: root
              group: root
          commands:
            install_cacheclient:
              command: ./install_cacheclient.sh
              cwd: /tmp
              ignoreErrors: false
        install_opcache:
          packages:
            yum:
              php-opcache: []
          files:
            /tmp/install_opcache.sh:
              content:
                !Sub |
                  #!/bin/bash -xe
                  # create hidden opcache directory locally & change owner to apache
                  if [ ! -d /var/www/.opcache ]; then                    
                      mkdir -p /var/www/.opcache
                  fi
                  #Ensure opcache is enabled and add settings recomended by moodle at https://docs.moodle.org/34/en/OPcache
                  sed -i 's/;opcache.file_cache=.*/opcache.file_cache=\/var\/www\/.opcache/' /etc/php.d/10-opcache.ini
                  sed -i 's/opcache.memory_consumption=.*/opcache.memory_consumption=512/' /etc/php.d/10-opcache.ini
                  sed -i 's/opcache.max_accelerated_files=.*/opcache.max_accelerated_files=8000/' /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.revalidate_freq=.*/opcache.revalidate_freq=300/' /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.use_cwd=.*/opcache.use_cwd=1/' /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.validate_timestamps=.*/opcache.validate_timestamps=1/' /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.save_comments=.*/opcache.save_comments=1/' /etc/php.d/10-opcache.ini
                  sed -i 's/;opcache.enable_file_override=.*/opcache.enable_file_override=60/' /etc/php.d/10-opcache.ini
              mode: 000500
              owner: root
              group: root
          commands:
            install_opcache:
              command: ./install_opcache.sh
              cwd: /tmp
              ignoreErrors: false
        install_cronapache:
          files:
            /var/spool/cron/apache:
              content: !Sub |
                */7 * * * * /usr/bin/php /var/www/moodle/html/admin/cli/cron.php
              mode: '000600'
              owner: apache
              group: apache
          packages:
            yum:
              cronie: []
          services:
            sysvinit:
              crond:
                enabled: true
                ensureRunning: true
          
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: uqam:sec
          Value: 4
        - Key: uqam:env
          Value: test
        - Key: uqam:nuke
          Value: Y
        - Key: uqam:nom
          Value: ena-moodle-dev-01
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            yum update -y
            
            #Create directory structure
            mkdir -p /var/www/moodle/html
            mkdir -p /var/www/moodle/data
            mkdir -p /var/www/moodle/cache
            mkdir -p /var/www/moodle/temp
            mkdir -p /var/www/moodle/local
          
            #Run CloudFormation Init Scripts
            /opt/aws/bin/cfn-init --configsets deploy_webserver --verbose --stack ${AWS::StackName} --resource VM --region ${AWS::Region}
            #/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource WebAutoScalingGroup --region ${AWS::Region}
