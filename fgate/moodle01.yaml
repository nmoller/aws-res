# References
# https://www.moodle.io/tutorials/deploy-moodle-to-aws-fargate-ct14
# https://github.com/moodle/database-templates/blob/master/aws/mysql.yml
# https://github.com/moodle/moodle-templates/blob/master/aws/fargate.yml
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html

AWSTemplateFormatVersion: '2010-09-09'  
Description: Moodle deployment on AWS Fargate, RDS (Aurora Serverless)

Parameters:
  DatabaseName:
    Default: "moodle"
    Description: The database name (Default "moodle", change if you are creating more than one database)
    Type: String

  DatabaseUsername:
    Default: "moodle"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 1-16
    Description: The database admin account user name. (Default "moodle")
    MaxLength: '16'
    MinLength: '1'
    Type: String

  DatabasePassword:
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters. Must have length 8-41.
    Description: The database admin account password. (Choose a secure password)
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String

  moodleCpu:
    Type: String
    Description: The CPU units for the container. Must adhere to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html.
    Default: 1024

  moodleMemory:
    Description: The memory reservation for the container. Must adhere to https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html.
    Type: Number
    Default: 2048

  moodleVersion:
    Type: String
    Default: 0.0.69
    AllowedValues:
      - 0.0.69
      - 0.0.68

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Database Configuration
        Parameters:
          - DatabaseName
          - DatabaseUsername
          - DatabasePassword
    ParameterLabels:
      DatabaseName:
          default: Database name
      DatabasePassword:
          default: Database Password
      DatabaseUsername:
          default: Database Username

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable


  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VPC
      GroupDescription: Access to database

  DatabaseSecurityGroupIngressFrommoodle:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from moodle service
      GroupId: !Ref 'DatabaseSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'MoodleServiceSecurityGroup'

  DatabaseSecurityGroupIngressFromVPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from moodle service
      GroupId: !Ref 'DatabaseSecurityGroup'
      FromPort: 3306
      ToPort: 3306
      IpProtocol: tcp
      CidrIp: '10.0.0.0/16'
  

  # From https://docs.moodle.org/38/en/MySQL_full_unicode_support
  DBClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: Test param group
      Family: 'aurora5.6'
      Parameters: 
        innodb_file_format: Barracuda
        innodb_file_per_table: 1
        innodb_large_prefix: 1
        character_set_database: utf8mb4
        character_set_client: utf8mb4
        character-set-client-handshake: 0
        character_set_server: utf8mb4
        collation_server: utf8mb4_unicode_ci

  DatabaseCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      MasterUsername: 
        Ref: DatabaseUsername
      MasterUserPassword: 
        Ref: DatabasePassword
      Engine: aurora
      EngineMode: serverless
      DatabaseName: !Ref DatabaseName
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 4
        MinCapacity: 1
        SecondsUntilAutoPause: 300
      DBClusterIdentifier: !Ref DatabaseName
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      VpcSecurityGroupIds:
        - Ref: DatabaseSecurityGroup
        #- Ref: MoodleServiceSecurityGroup
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'LoadBalancerSecurityGroup']

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /test.php
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref 'AWS::StackName', 'moodle']]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref 'VPC'
      TargetType: 'ip'

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'LoadBalancerTargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP


  MoodleCluster:
    Type: AWS::ECS::Cluster

  MoodleLogs:
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 7

  MoodleTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: DatabaseCluster
    Properties:
      Cpu: !Ref moodleCpu
      Memory: !Ref moodleMemory
      RequiresCompatibilities: 
        - FARGATE
      Family: moodle
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref MoodleTaskExecutionRole
      TaskRoleArn: !Ref MoodleTaskExecutionRole
      ContainerDefinitions:
        - Name: moodleContainer
          Essential: true
          #Image: !Join [':', [ 'nmolleruq/moouqamtest', !Ref moodleVersion ]]
          Image: nmolleruq/moouqamtest:1.1.6
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: MDL_WWWROOT
              Value: /var/www/moodledata
            - Name: MDL_DBTYPE
              Value: mysqli
            - Name: MDL_DBHOST
              Value: !GetAtt DatabaseCluster.Endpoint.Address
            - Name: MDL_DBNAME
              Value: !Ref DatabaseName
            - Name: MDL_DBUSER
              Value: !Ref DatabaseUsername
            - Name: MDL_DBPASS
              Value: !Ref DatabasePassword
            - Name: MDL_WWWROOT
              Value: !Join ['', ['http://', !GetAtt 'LoadBalancer.DNSName']]
            #- Name: MDL_MEMSESSION
            #  Value: memsession
            - Name: MDL_DATAROOT
              Value: '/var/www/moodledata'
            - Name: MDL_LOCALCACHEDIR
              Value: '/tmp'
            
          Ulimits:
            - Name: nofile
              HardLimit: 1000000
              SoftLimit: 1000000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: moodle

  MoodleServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref 'VPC'

  MoodleServiceSecurityGroupIngressFromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the load balancer
      GroupId: !Ref 'MoodleServiceSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'

  MoodleServiceSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref 'MoodleServiceSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'MoodleServiceSecurityGroup'

  MoodleServiceSecurityGroupIngressFromDB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from DB
      GroupId: !Ref 'MoodleServiceSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'DatabaseSecurityGroup'

  MoodleService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties: 
      Cluster: !Ref MoodleCluster
      ServiceName: moodle
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 30
      TaskDefinition: !Ref MoodleTaskDefinition
      LoadBalancers: 
        - ContainerName: moodleContainer
          ContainerPort: 80
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref MoodleServiceSecurityGroup
            - !Ref DatabaseSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo

  MoodleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

  MoodleTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'


Outputs:
  moodleEndpoint:
    Description: The endpoint of the external load balancer
    Value: !Join ['', ['http://', !GetAtt 'LoadBalancer.DNSName']]
    Export:
      Name: !Join [':', [ !Ref 'AWS::StackName', 'moodleEndpoint' ]]